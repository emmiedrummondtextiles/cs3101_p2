

DELIMITER $$

-- BEFORE INSERT
CREATE TRIGGER trg_stop_before_insert
BEFORE INSERT ON stop
FOR EACH ROW
BEGIN
    DECLARE plan_ddh INT;
    DECLARE plan_ddm INT;
    SELECT ddh, ddm
      INTO plan_ddh, plan_ddm
      FROM plan
     WHERE hc  = NEW.hc
       AND frm = NEW.frm
       AND loc = NEW.loc;

    IF NEW.adh > plan_ddh
     OR (NEW.adh = plan_ddh AND NEW.adm > plan_ddm) THEN
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Arrival cannot occur after departure';
    END IF;
END$$

-- BEFORE UPDATE
CREATE TRIGGER trg_stop_before_update
BEFORE UPDATE ON stop
FOR EACH ROW
BEGIN
    DECLARE plan_ddh INT;
    DECLARE plan_ddm INT;
    SELECT ddh, ddm
      INTO plan_ddh, plan_ddm
      FROM plan
     WHERE hc  = NEW.hc
       AND frm = NEW.frm
       AND loc = NEW.loc;

    IF NEW.adh > plan_ddh
     OR (NEW.adh = plan_ddh AND NEW.adm > plan_ddm) THEN
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Arrival cannot occur after departure';
    END IF;
END$$

DELIMITER ;


---contraint 2

   DELIMITER $$

(INSERT)
CREATE TRIGGER trg_plan_departure_finite_insert
BEFORE INSERT ON plan
FOR EACH ROW
BEGIN
    DECLARE next_count INT;

    SELECT COUNT(*) INTO next_count
    FROM plan
    WHERE hc  = NEW.hc
      AND frm = NEW.loc;

    IF next_count > 0
       AND (NEW.ddh IS NULL OR NEW.ddm IS NULL) THEN
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Non-terminal must have finite departure differential';
    END IF;
END$$

-- Enforce finite ddh/ddm on non‐terminal plans (UPDATE)
CREATE TRIGGER trg_plan_departure_finite_update
BEFORE UPDATE ON plan
FOR EACH ROW
BEGIN
    DECLARE next_count INT;

    SELECT COUNT(*) INTO next_count
    FROM plan
    WHERE hc  = NEW.hc
      AND frm = NEW.loc;

    IF next_count > 0
       AND (NEW.ddh IS NULL OR NEW.ddm IS NULL) THEN
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'Non-terminal must have finite departure differential';
    END IF;
END$$

DELIMITER ;


---constraint 3


ALTER TABLE service
  ADD CONSTRAINT uq_service_train_time
  UNIQUE (uid, dh, dm);
